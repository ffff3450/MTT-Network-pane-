syntax = "proto3";
package mtt.erc20.v1;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "mtt/x/erc20/types";

// Msg defines the erc20 Msg service.
service Msg {
  // ConvertCoin mints a ERC20 representation of the native Cosmos coin denom
  // that is registered on the token mapping.
  rpc ConvertCoin(MsgConvertCoin) returns (MsgConvertCoinResponse) {
    option (google.api.http).get = "/mtt/erc20/v1/tx/convert_coin";
  };
  // ConvertERC20 mints a native Cosmos coin representation of the ERC20 token
  // contract that is registered on the token mapping.
  rpc ConvertERC20(MsgConvertERC20) returns (MsgConvertERC20Response) {
    option (google.api.http).get = "/mtt/erc20/v1/tx/convert_erc20";
  };
  // SetBridge set bridge address
  // mtt bridge address.
  rpc SetBridge(MsgSetBridge) returns (MsgSetBridgeResponse) {
    option (google.api.http).get = "/mtt/erc20/v1/tx/set_bridge";
  };
  // SetAdmin set admin address
  // mtt bridge admin address.
  rpc SetAdmin(MsgSetAdmin) returns (MsgSetAdminResponse) {
    option (google.api.http).get = "/mtt/erc20/v1/tx/set_admin";
  };
  // SetBeginBlock set mine begin block
  // the height of staking have reward.
  rpc SetBeginBlock(MsgSetBeginBlock) returns (MsgSetBeginBlockResponse) {
    option (google.api.http).get = "/mtt/erc20/v1/tx/set_begin_block";
  };
  // SetBeginBlock set mine begin block
  // the height of staking have reward.
  rpc FundMint(MsgFundMint) returns (MsgFundMintResponse) {
    option (google.api.http).get = "/mtt/erc20/v1/tx/fund_mint";
  };
}

// MsgSetBeginBlock defines a Msg to set bridge address
message MsgSetBeginBlock {
  option (cosmos.msg.v1.signer) = "from_address";
  string   from_address                    = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 height = 2;
}

// MsgSetBeginBlockResponse returns no fields
message MsgSetBeginBlockResponse {}

// MsgSetBridge defines a Msg to set bridge address
message MsgSetBridge {
  option (cosmos.msg.v1.signer) = "from_address";
  string   from_address                    = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string address = 2;
}

// MsgSetBridgeResponse returns no fields
message MsgSetBridgeResponse {}

// MsgSetAdmin defines a Msg to set bridge admin
message MsgSetAdmin {
  option (cosmos.msg.v1.signer) = "from_address";
  string   from_address                    = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string address = 2;
}

// MsgSetBridgeResponse returns no fields
message MsgSetAdminResponse {}

// MsgFundMint defines a Msg to set bridge address
message MsgFundMint {
  option (cosmos.msg.v1.signer) = "from_address";
  string   from_address                    = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 amount = 2;
}

// MsgSetBridgeResponse returns no fields
message MsgFundMintResponse {}

// MsgConvertCoin defines a Msg to convert a native Cosmos coin to a ERC20 token
message MsgConvertCoin {
  // Cosmos coin which denomination is registered in a token pair. The coin
  // amount defines the amount of coins to convert.
  cosmos.base.v1beta1.Coin coin = 1 [ (gogoproto.nullable) = false ];
  // recipient hex address to receive ERC20 token
  string receiver = 2;
  // cosmos bech32 address from the owner of the given Cosmos coins
  string sender = 3;
}

// MsgConvertCoinResponse returns no fields
message MsgConvertCoinResponse {}

// MsgConvertERC20 defines a Msg to convert a ERC20 token to a native Cosmos
// coin.
message MsgConvertERC20 {
  // ERC20 token contract address registered in a token pair
  string contract_address = 1;
  // amount of ERC20 tokens to convert
  string amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // bech32 address to receive native Cosmos coins
  string receiver = 3;
  // sender hex address from the owner of the given ERC20 tokens
  string sender = 4;
}

// MsgConvertERC20Response returns no fields
message MsgConvertERC20Response {}
